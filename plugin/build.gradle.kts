import org.apache.commons.io.Charsets

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.11.1/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
    `kotlin-dsl`
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`
    `maven-publish`
    //signing

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.plugin.publish)
}

repositories {
    google()
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    //compileOnly("com.android.tools.build:gradle:8.9.2")
    compileOnly(libs.gradle.build.tools)
    api(libs.okhttp3)
    api(libs.okhttp3.logging)

    // Use the Kotlin JUnit 5 integration.
    testImplementation(libs.kotlin.test.junit5)
    testRuntimeOnly(libs.junit.platform.launcher)
}

group = "io.github.tafilovic"
version = "1.0.0"

// Read property to determine which plugin to register
val publishTarget = findProperty("publishTarget")?.toString()?.lowercase() ?: "central"

gradlePlugin {
    website = "https://github.com/tafilovic/central-portal-publisher"
    vcsUrl = "https://github.com/tafilovic/central-portal-publisher.git"
    plugins {
        if (publishTarget == "central") {
            register("centralPortalPlugin") {
                id = "central.portal.publisher"
                implementationClass = "io.github.tafilovic.CentralPortalPublisherPlugin"
                displayName = "Central Portal Publishing plugin"
                description =
                    "Gradle plugin for use in kotlin and java libraries for publishing to Central Portal"
                tags =
                    listOf("central", "portal", "publish", "kotlin", "java", "library", "android")
            }
        }

        if (publishTarget == "gradle") {
            register("gradlePortalPlugin") {
                id = "io.github.tafilovic.central-portal-publisher"
                implementationClass = "io.github.tafilovic.CentralPortalPublisherPlugin"
                displayName = "Central Portal Publishing plugin"
                description =
                    "Gradle plugin for use in kotlin and java libraries for publishing to Central Portal"
                tags =
                    listOf("central", "portal", "publish", "kotlin", "java", "library", "android")
            }
        }
    }
}

tasks.register("publishToGradlePortal") {
    dependsOn("publishPlugins")
    doFirst {
        ext["publishTarget"] = "gradle"
    }
}

tasks.register("publishToMavenCentral") {
    dependsOn("publishAllPublicationsToMavenCentralPortal")
    doFirst {
        ext["publishTarget"] = "central"
    }
}

afterEvaluate {
    if (project.hasProperty("signing.keyId") && project.hasProperty("signing.password") && project.hasProperty(
            "signing.secretKeyRingFile"
        )
    ) {
        project.pluginManager.apply("signing")
        val signingKeyId: String = project.findProperty("signing.keyId")?.toString() ?: ""
        val signingPassword: String = project.findProperty("signing.password")?.toString() ?: ""
        val file =
            project.findProperty("signing.secretKeyRingFile")?.toString()?.let { file(it) }
        val signingKeyFile: String? =
            file?.bufferedReader(Charsets.UTF_8).use { it?.readText()?.trim() }

        println("SigningKey: $signingKeyId")
        println("FilePath: ${file?.absolutePath}")
        println("SigningKeyFile: $signingKeyFile")
        println("SigningPassword: $signingPassword")

        extensions.configure(SigningExtension::class.java) {
            useInMemoryPgpKeys(signingKeyId, signingKeyFile, signingPassword)
            sign(publishing.publications)
        }
    }
}


publishing {
    publications {
        create("centralPortalPublisher", MavenPublication::class.java) {
            groupId = "io.github.tafilovic"
            artifactId = "central-portal-publisher"
            version = "1.0.0"
        }
    }
}